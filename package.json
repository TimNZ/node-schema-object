{
  "name": "node-schema-object",
  "version": "0.7.0",
  "description": "Node object with validated, transformed & typecasted schema.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:scotthovestadt/node-schema-object.git"
  },
  "keywords": [
    "schema"
  ],
  "dependencies": {
    "underscore": "1.4.x"
  },
  "devDependencies": {
    "should": "*",
    "mocha": "*"
  },
  "author": {
    "name": "Scott Hovestadt"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "readme": "node-schema-object [![Build Status](https://travis-ci.org/scotthovestadt/node-schema-object.png?branch=master)](https://travis-ci.org/scotthovestadt/node-schema-object)\r\n==================\r\n\r\nDesigned to enforce schema on Javascript objects. Allows you to specify type, transformation and validation of values via a set of attributes. Support for sub-schemas included.\r\n\r\n```\r\nnpm install node-schema-object\r\n```\r\n\r\n#Very basic usage example\r\n```\r\nvar SchemaObject = require('node-schema-object');\r\n\r\n// Create User schema\r\nvar User = new SchemaObject({\r\n  firstName: String,\r\n  lastName: String,\r\n  birthDate: Date\r\n});\r\n\r\n// Initialize instance of user\r\nvar user = new User({firstName: 'Scott', lastName: 'Hovestadt', birthDate: 'June 21, 1988'});\r\nconsole.log(user.toObject());\r\n\r\n// Prints:\r\n{ firstName: 'Scott',\r\n  lastName: 'Hovestadt',\r\n  birthDate: Tue Jun 21 1988 00:00:00 GMT-0700 (PDT) }\r\n```\r\n\r\n#Advanced example\r\n```\r\nvar SchemaObject = require('node-schema-object');\r\n\r\n// Create custom basic type\r\n// Type can be extended with more properties when defined\r\nvar NotEmptyString = {type: String, minLength: 1};\r\n\r\n// Create sub-schema for user's Company\r\nvar Company = new SchemaObject({\r\n  startDate: Date,\r\n  endDate: Date,\r\n  name: NotEmptyString\r\n});\r\n\r\n// Create User schema\r\nvar User = new SchemaObject({\r\n  // Basic user information using custom type\r\n  firstName: NotEmptyString,\r\n  lastName: NotEmptyString,\r\n  \r\n  // \"NotEmptyString\" with only possible values as 'm' or 'f'\r\n  gender: {type: NotEmptyString, enum: ['m', 'f']},\r\n  \r\n  // Index with sub-schema\r\n  company: Company,\r\n  \r\n  // An array of Objects with an enforced type\r\n  workHistory: [Company],\r\n  \r\n  // Create field which reflects other values but can't be directly modified\r\n  fullName: {type: String, readOnly: true, default: function() {\r\n    return (this.firstName + ' ' + this.lastName).trim();\r\n  }}\r\n});\r\n\r\n// Initialize a new instance of the User with a value\r\nvar user = new User({firstName: 'Scott', lastName: 'Hovestadt', gender: 'm'});\r\n\r\n// Set company name\r\nuser.company.name = 'My Company';\r\n\r\n// The date is automatically typecast from String\r\nuser.company.startDate = 'June 1, 2010';\r\n\r\n// Add company to work history\r\nuser.workHistory.push({\r\n  name: 'Old Company',\r\n  startDate: '01/12/2005',\r\n  endDate: '01/20/2010'\r\n});\r\n\r\nconsole.log(user.toObject());\r\n\r\n// Prints:\r\n{ firstName: 'Scott',\r\n  lastName: 'Hovestadt',\r\n  gender: 'm',\r\n  company: \r\n   { startDate: Tue Jun 01 2010 00:00:00 GMT-0700 (PDT),\r\n     endDate: undefined,\r\n     name: 'My Company' },\r\n  workHistory: \r\n   [ { startDate: Wed Jan 12 2005 00:00:00 GMT-0800 (PST),\r\n       endDate: Wed Jan 20 2010 00:00:00 GMT-0800 (PST),\r\n       name: 'Old Company' } ],\r\n  fullName: 'Scott Hovestadt' }\r\n```\r\n\r\n#Types\r\n\r\nSupported types:\r\n- String\r\n- Number\r\n- Boolean\r\n- Date\r\n- Array (including types within Array)\r\n- Object (including typed SchemaObjects for sub-schemas)\r\n- 'alias'\r\n- undefined\r\n\r\nWhen a type is specified, it will be enforced. Typecasting is enforced on all types. If a value cannot be typecasted to the correct type, the original value will remain untouched.\r\n\r\nTypes can be extended with a variety of attributes. Some attributes are type-specific and some apply to all types.\r\n\r\nCustom types can be created by defining an object with type properties.\r\n```\r\nvar NotEmptyString = {type: String, minLength: 1};\r\ncountry: {type: NotEmptyString, default: 'USA'}\r\n```\r\n\r\n##General attributes\r\n\r\n###transform\r\nCalled immediately when value is set and before any typecast is done.\r\n```\r\nname: {type: String, transform: function(value) {\r\n  // Modify the value here...\r\n  return value;\r\n}}\r\n```\r\n\r\n###default\r\nProvide default value. You may pass value directly or pass a function which will be executed when the value is retrieved. The function is executed in the context of the object and can use \"this\" to access other properties.\r\n```\r\ncountry: {type: String, default: 'USA'}\r\n```\r\n\r\n###readOnly\r\nIf true, the value can be read but cannot be written to. This can be useful for creating fields that reflect other values.\r\n```\r\nfullName: {type: String, readOnly: true, default: function(value) {\r\n  return (this.firstName + ' ' + this.lastName).trim();\r\n}}\r\n```\r\n\r\n###invisible\r\nIf true, the value can be written to but isn't outputted as an index when toObject() is called. This can be useful for creating aliases that redirect to other indexes but aren't actually present on the object.\r\n```\r\nzip: String,\r\npostalCode: {type: 'alias', invisible: true, index: 'zip'}\r\n// this.postalCode = 12345 -> this.toObject() -> {zip: '12345'}\r\n```\r\n\r\n\r\n##String\r\n\r\n###stringTransform\r\nCalled after value is typecast to string **if** value was successfully typecast but called before all validation.\r\n```\r\npostalCode: {type: String, stringTransform: function(string) {\r\n  // Type will ALWAYS be String, so using string prototype is OK.\r\n  return string.toUpperCase();\r\n}}\r\n```\r\n\r\n###regex\r\nValidates string against Regular Expression. If string doesn't match, it's rejected.\r\n```\r\nmemberCode: {type: String, regex: new RegExp('^([0-9A-Z]{4})$')}\r\n```\r\n\r\n###enum\r\nValidates string against array of strings. If not present, it's rejected.\r\n```\r\ngender: {type: String, enum: ['m', 'f']}\r\n```\r\n\r\n###minLength\r\nEnforces minimum string length.\r\n```\r\nnotEmpty: {type: String, minLength: 1}\r\n```\r\n\r\n###maxLength\r\nEnforces maximum string length.\r\n```\r\nstateAbbrev: {type: String, maxLength: 2}\r\n```\r\n\r\n###clip\r\nIf true, clips string to maximum string length instead of rejecting string.\r\n```\r\nbio: {type: String, maxLength: 255, clip: true}\r\n```\r\n\r\n\r\n##Number\r\n\r\n###min\r\nNumber must be > min attribute or it's rejected.\r\n```\r\npositive: {type: Number, min: 0}\r\n```\r\n\r\n###max\r\nNumber must be < max attribute or it's rejected.\r\n```\r\nnegative: {type: Number, max: 0}\r\n```\r\n\r\n\r\n##Array\r\n\r\n###unique\r\nEnsures duplicate-free array, using === to test object equality.\r\n```\r\nemails: {type: Array, unique: true, arrayType: String}\r\n```\r\n\r\n###arrayType\r\nElements within the array will be typed to the attributes defined.\r\n```\r\naliases: {type: Array, arrayType: {type: String, minLength: 1}}\r\n```\r\n\r\nAn alternative shorthand version is also available -- wrap the properties within array brackets.\r\n```\r\naliases: [{type: String, minLength: 1}]\r\n```\r\n\r\n\r\n##Object\r\n###objectType\r\nAllows you to define a typed object.\r\n```\r\ncompany: {type: Object, objectType: {\r\n  name: String\r\n}}\r\n```\r\n\r\nAn alternative shorthand version is also available -- simply pass an instance of SchemaObject or a schema.\r\n```\r\ncompany: {\r\n  name: String\r\n}\r\n```\r\n\r\n\r\n##Alias\r\n\r\n###index (required)\r\nThe index key of the property being aliased.\r\n```\r\nzip: String,\r\npostalCode: {type: 'alias', alias: 'zip'}\r\n// this.postalCode = 12345 -> this.toObject() -> {zip: '12345'}\r\n```\r\n\r\n#Unit tests\r\n```\r\n  any type\r\n    transform\r\n      ✓ should turn any string to lowercase but not touch other values \r\n    default\r\n      ◦ default as function + readOnly to combine properties into single readOnl      ✓ default as function + readOnly to combine properties into single readOnly property \r\n    alias\r\n      ✓ should allow alias to be used to set values \r\n      ✓ should allow alias to pre-transform values \r\n    readOnly\r\n      ✓ should not allow you to modify value \r\n\r\n  String\r\n    typecasting\r\n      ✓ should typecast integer to string \r\n      ✓ should typecast boolean to string \r\n      ✓ should join array into string \r\n      ✓ should reject object \r\n    regex\r\n      ✓ should only allow values that match regex ^([A-Z]{4})$ \r\n    enum\r\n      ✓ should allow values in enum \r\n      ✓ value should remain untouched when non-enum is passed \r\n      ✓ default must be in enum or is rejected \r\n      ✓ default should be set when in enum \r\n    stringTransform\r\n      ✓ should return lowercase \r\n      ◦ should always be passed a String object and not called if undefined or n      ✓ should always be passed a String object and not called if undefined or null \r\n    read only\r\n      ✓ should always be default value \r\n    minLength\r\n      ✓ should not allow empty strings \r\n    maxLength\r\n      ✓ should allow a max of 5 characters \r\n    maxLength + clip\r\n      ✓ should clip string to 5 characters \r\n\r\n  Number\r\n    typecasting\r\n      ✓ should typecast string to number \r\n      ✓ should typecast boolean to number \r\n    min\r\n      ✓ should reject values below min \r\n    max\r\n      ✓ should reject values above max \r\n\r\n  Boolean\r\n    typecasting\r\n      ✓ should typecast string to boolean \r\n      ✓ should typecast number to boolean \r\n\r\n  Object\r\n    accessing properties\r\n      ✓ should set properties without initializing object \r\n    schema\r\n      ✓ should allow nested schemas \r\n      ✓ should allow shorthand declaration \r\n\r\n  Array\r\n    typecasting\r\n      ✓ should typecast all array elements to string \r\n      ✓ should transform all strings to lowercase \r\n      ✓ should allow you to push() in new schema objects \r\n      ✓ should enforce types on existing array elements \r\n    unique\r\n      ✓ should enforce unique values within array with typecasting \r\n      ✓ should enforce unique values within array without typecasting \r\n    toArray\r\n      ✓ should return native Array \r\n\r\n  Date\r\n    typecasting\r\n      ✓ should typecast string \"June 21, 1988\" to date \r\n      ✓ should typecast string \"06/21/1988\" to date \r\n      ✓ should typecast string \"6/21/1988\" to date \r\n      ✓ should reject nonsense strings \r\n      ✓ should typecast integer timestamp seconds to date \r\n      ✓ should typecast integer timestamp milliseconds to date \r\n      ✓ should reject boolean \r\n      ✓ should reject array \r\n      ✓ should reject object \r\n\r\n  toObject()\r\n    ✓ should have index \"string\" with value \"1234\" \r\n    ✓ should write Date object for Date type \r\n    ✓ should converted nested SchemaObjects to primitive Object \r\n    ✓ should converted SchemaObjects nested within Arrays to primitive Objects \r\n    ✓ should not write invisible indexes \r\n\r\n  type definition\r\n    ✓ should allow custom type using an object with properties in \"type\" property and merge properties together \r\n```\r\n",
  "bugs": {
    "url": "https://github.com/scotthovestadt/node-schema-object/issues"
  },
  "_id": "node-schema-object@0.7.0",
  "dist": {
    "shasum": "e4a5d82a258e3ab031e86ba156cf15ddef0ee6c5"
  },
  "_resolved": "git://github.com/TimNZ/node-schema-object.git#9bfa3b3b7b40826cc33b481abe0f3072d3f0315d",
  "_from": "node-schema-object@git://github.com/TimNZ/node-schema-object.git"
}
